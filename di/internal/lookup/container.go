// Code generated by DIGEN; DO NOT EDIT.
// This file was generated by Dependency Injection Container Generator  (built at ).
// See docs at https://github.com/strider2038/digen

package lookup

import (
	"cmd/app/config"
	gathering_place_api "cmd/app/entities/gatheringPlace/api"
	gathering_place_repository "cmd/app/entities/gatheringPlace/repository"
	gathering_place_usecase "cmd/app/entities/gatheringPlace/usecases"
	meeting_api "cmd/app/entities/meeting/api"
	meeting_repository "cmd/app/entities/meeting/repository"
	meeting_usecase "cmd/app/entities/meeting/usecases"
	user_api "cmd/app/entities/user/api"
	user_repository "cmd/app/entities/user/repository"
	user_usecase "cmd/app/entities/user/usecases"
	"context"
	"database/sql"
	chi "github.com/go-chi/chi/v5"
	"log"
	"net/http"
)

type Container interface {
	// SetError sets the first error into container. The error is used in the public container to return an initialization error.
	SetError(err error)

	Config(ctx context.Context) config.Params
	Logger(ctx context.Context) *log.Logger
	DB(ctx context.Context) *sql.DB
	Server(ctx context.Context) *http.Server
	Router(ctx context.Context) *chi.Mux

	API() APIContainer
	UseCases() UseCaseContainer
	Repositories() RepositoryContainer
}

type APIContainer interface {
	FindMeetingHandler(ctx context.Context) *meeting_api.FindMeetingByIdHandler
	FindUserHandler(ctx context.Context) *user_api.FindUserByIdHandler
	FindGatheringPlaceHandler(ctx context.Context) *gathering_place_api.FindGatheringPlaceByIdHandler
	CreateUserHandler(ctx context.Context) *user_api.CreateUserHandler
	UpdateUserHandler(ctx context.Context) *user_api.UpdateUserHandler
}

type UseCaseContainer interface {
	FindMeeting(ctx context.Context) *meeting_usecase.FindMeetingByIdUseCase
	FindUser(ctx context.Context) *user_usecase.FindUserByIdUseCase
	FindGatheringPlace(ctx context.Context) *gathering_place_usecase.FindGatheringPlaceByIdUseCase
	CreateUser(ctx context.Context) *user_usecase.CreateUserUseCase
	UpdateUser(ctx context.Context) *user_usecase.UpdateUserUseCase
}

type RepositoryContainer interface {
	MeetingRepository(ctx context.Context) meeting_repository.MeetingsRepository
	UserRepository(ctx context.Context) user_repository.UsersRepository
	GatheringPlaceRepository(ctx context.Context) gathering_place_repository.PlacesRepository
}
